from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
import aiosqlite
import datetime
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_NAME = "delivery_bot.db"
PHONE_REGEX = r'^(\+?\d{1,3}?[- .]?)?(\(?\d{3}\)?[- .]?)?\d{3}[- .]?\d{4}$'


class OrderStates(StatesGroup):
    name = State()
    phone = State()
    service_type = State()
    from_location = State()
    to_location = State()
    item_description = State()
    contact_phone = State()
    confirm = State()


bot = Bot(token="7530190553:AAHP8VlgrlYOIaRfGxGhU3aL6ekuY56YSgI")
dp = Dispatcher(storage=MemoryStorage())


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                phone TEXT NOT NULL,
                registration_date TEXT DEFAULT CURRENT_TIMESTAMP
            )''')

            await db.execute('''CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                service_type TEXT NOT NULL,
                from_location TEXT,
                to_location TEXT,
                item_description TEXT,
                contact_phone TEXT NOT NULL,
                order_date TEXT DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'new',
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )''')
            await db.commit()
    except Exception as e:
        logger.error(f"Database initialization error: {e}")


async def add_user(user_id: int, name: str, phone: str):
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute('''
                INSERT OR REPLACE INTO users (user_id, name, phone)
                VALUES (?, ?, ?)
            ''', (user_id, name, phone))
            await db.commit()
    except Exception as e:
        logger.error(f"Error adding user: {e}")


async def add_order(user_data: dict):
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute('''
                INSERT INTO orders (
                    user_id, service_type, from_location, 
                    to_location, item_description, contact_phone
                ) VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user_data['user_id'],
                user_data['service_type'],
                user_data.get('from_location'),
                user_data.get('to_location'),
                user_data.get('item_description'),
                user_data['contact_phone']
            ))
            await db.commit()
    except Exception as e:
        logger.error(f"Error adding order: {e}")


async def get_user_orders(user_id: int):
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            cursor = await db.execute('''
                SELECT order_id, service_type, order_date, status 
                FROM orders WHERE user_id = ? ORDER BY order_date DESC
            ''', (user_id,))
            return await cursor.fetchall()
    except Exception as e:
        logger.error(f"Error getting user orders: {e}")
        return []


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_service_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üçî –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã")
    builder.button(text="üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –≤–µ—â–µ–π")
    builder.button(text="üöó –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def make_yes_no_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return builder.as_markup(resize_keyboard=True)


def make_cancel_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")]],
        resize_keyboard=True
    )


def make_contact_request_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def make_location_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def is_valid_phone(phone: str) -> bool:
    return re.match(PHONE_REGEX, phone) is not None


def is_valid_name(name: str) -> bool:
    return 2 <= len(name) <= 50 and all(c.isalpha() or c.isspace() for c in name)


def is_valid_location(location: str) -> bool:
    return len(location) >= 5


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ OhanGo!\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=make_cancel_keyboard()
    )
    await state.set_state(OrderStates.name)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/myorders - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    )
    await message.answer(help_text, parse_mode="HTML")


@dp.message(Command("myorders"))
async def cmd_my_orders(message: Message):
    orders = await get_user_orders(message.from_user.id)
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    orders_text = ["üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>"]
    for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        order_date = datetime.datetime.strptime(order[2], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        orders_text.append(
            f"üîπ #{order[0]} {order[1]} - {order_date} ({order[3]})"
        )

    await message.answer("\n".join(orders_text), parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(OrderStates.name)
async def process_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    if not is_valid_name(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, 2-50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(name=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=make_contact_request_keyboard()
    )
    await state.set_state(OrderStates.phone)


@dp.message(OrderStates.phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    phone = message.contact.phone_number if message.contact else message.text

    if not is_valid_phone(phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    await state.update_data(phone=phone)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        reply_markup=make_service_keyboard()
    )
    await state.set_state(OrderStates.service_type)


@dp.message(OrderStates.service_type)
async def process_service_type(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    service_types = ["üçî –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –≤–µ—â–µ–π", "üöó –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞"]
    if message.text not in service_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(service_type=message.text)

    if message.text == "üöó –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—É—Ä—å–µ—Ä—É:",
            reply_markup=make_cancel_keyboard()
        )
        await state.set_state(OrderStates.item_description)
    else:
        await message.answer(
            "–û—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å? (—É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è):",
            reply_markup=make_location_keyboard()
        )
        await state.set_state(OrderStates.from_location)


@dp.message(OrderStates.from_location)
async def process_from_location(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    location = None
    if message.location:
        location = f"GPS: {message.location.latitude}, {message.location.longitude}"
    else:
        location = message.text

    if not is_valid_location(location):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(from_location=location)
    await message.answer(
        "–ö—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å? (—É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è):",
        reply_markup=make_location_keyboard()
    )
    await state.set_state(OrderStates.to_location)


@dp.message(OrderStates.to_location)
async def process_to_location(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    location = None
    if message.location:
        location = f"GPS: {message.location.latitude}, {message.location.longitude}"
    else:
        location = message.text

    if not is_valid_location(location):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(to_location=location)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 –ø–∏—Ü—Ü—ã –∏ –Ω–∞–ø–∏—Ç–∫–∏'):",
        reply_markup=make_cancel_keyboard()
    )
    await state.set_state(OrderStates.item_description)


@dp.message(OrderStates.item_description)
async def process_item_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    if len(message.text) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return

    await state.update_data(item_description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–º–æ–∂–Ω–æ —Ç–æ—Ç –∂–µ):",
        reply_markup=make_contact_request_keyboard()
    )
    await state.set_state(OrderStates.contact_phone)


@dp.message(OrderStates.contact_phone)
async def process_contact_phone(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    phone = None
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text

    if not is_valid_phone(phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    await state.update_data(contact_phone=phone)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = (
        "üìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üîß <b>–£—Å–ª—É–≥–∞:</b> {data['service_type']}\n"
    )

    if 'from_location' in data:
        order_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {data['from_location']}\n"
    if 'to_location' in data:
        order_text += f"üèÅ <b>–ö—É–¥–∞:</b> {data['to_location']}\n"
    if 'item_description' in data:
        order_text += f"üì¶ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['item_description']}\n"

    order_text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
    order_text += "–í—Å–µ –≤–µ—Ä–Ω–æ?"

    await message.answer(
        order_text,
        parse_mode="HTML",
        reply_markup=make_yes_no_keyboard()
    )
    await state.set_state(OrderStates.confirm)


@dp.message(OrderStates.confirm)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text not in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    data['user_id'] = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑
    await add_user(user_id=data['user_id'], name=data['name'], phone=data['phone'])
    await add_order(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /myorders",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(StateFilter(OrderStates), lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –∫–æ–º–∞–Ω–¥—ã /start",
        reply_markup=ReplyKeyboardRemove()
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())